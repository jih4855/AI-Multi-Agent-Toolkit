{
  "concepts_and_terms": [
    "데이터베이스",
    "공유 데이터",
    "저장 데이터",
    "통합 데이터",
    "운영 데이터",
    "병행 제어",
    "트랜잭션",
    "모순성",
    "연쇄 복기",
    "비완료 의존성",
    "신장 트리",
    "팬텀",
    "2단계 로킹 규약",
    "락",
    "언락",
    "확장 단계",
    "축소 단계",
    "로킹 기법",
    "타임스탬프 기법",
    "직렬화",
    "커밋",
    "낙관적 병행 제어"
  ],
  "questions": [
    {
      "question": "다음 중 데이터베이스의 주요 특징과 거리가 먼 것은?",
      "options": [
        "공유 데이터: 여러 사용자가 동시에 데이터를 접근하고 이용할 수 있다.",
        "저장 데이터: 보조 기억장치에 저장되어 영구적으로 유지되는 데이터이다.",
        "통합 데이터: 중복을 최소화하여 한 곳에 모아 관리하는 데이터이다.",
        "운영 데이터: 일시적으로 사용되는 데이터를 주로 관리한다."
      ],
      "answer": "운영 데이터: 일시적으로 사용되는 데이터를 주로 관리한다.",
      "explanation": "데이터베이스의 '운영 데이터'는 조직의 고유한 업무를 수행하는 데 필수적이고 지속적으로 이용되는 데이터를 의미하며, 일시적으로 사용되는 데이터와는 거리가 멀다. '공유 데이터', '저장 데이터', '통합 데이터'는 데이터베이스의 중요한 특징이다."
    },
    {
      "question": "적절한 `병행 제어` 기법이 없는 환경에서 여러 `트랜잭션`이 동시에 실행될 때 발생할 수 있는 문제점으로 옳지 않은 것은?",
      "options": [
        "모순성: 데이터의 불일치 현상이 발생할 수 있다.",
        "연쇄 복기: 하나의 트랜잭션 실패가 다른 트랜잭션의 복기를 유발할 수 있다.",
        "비완료 의존성: 아직 완료되지 않은 트랜잭션의 데이터를 다른 트랜잭션이 읽는 현상이다.",
        "신장 트리: 데이터 접근 경로가 비효율적으로 길어지는 문제이다."
      ],
      "answer": "신장 트리: 데이터 접근 경로가 비효율적으로 길어지는 문제이다.",
      "explanation": "`신장 트리`는 그래프 이론에서 모든 정점을 연결하는 최소 간선 집합으로 이루어진 트리를 의미하며, 데이터베이스 `병행 제어`와 관련된 `트랜잭션` 문제점은 아니다. `모순성`, `연쇄 복기`, `비완료 의존성`, `팬텀` 등은 `트랜잭션` 병행 수행 시 `병행 제어` 부족으로 발생할 수 있는 대표적인 문제점들이다."
    },
    {
      "question": "`2단계 로킹 규약`에 대한 설명으로 가장 적절한 것은?",
      "options": [
        "`락` 설정과 `언락` 해제가 `확장 단계`에서만 이루어진다.",
        "`트랜잭션`이 모든 `락`을 해제한 후에도 새로운 `락`을 설정할 수 있다.",
        "`확장 단계`에서는 `락` 설정만 가능하며, `축소 단계`에서는 `언락` 해제만 가능하다.",
        "`로킹 기법`과는 관계없이 `타임스탬프 기법`과 함께 사용된다."
      ],
      "answer": "`확장 단계`에서는 `락` 설정만 가능하며, `축소 단계`에서는 `언락` 해제만 가능하다.",
      "explanation": "`2단계 로킹 규약`은 `트랜잭션`의 `락` 설정과 `언락` 해제를 두 단계로 나누는 `로킹 기법`이다. `확장 단계`에서는 새로운 `락`을 설정할 수 있지만 `언락`은 불가능하며, `축소 단계`에서는 `언락`만 가능하고 새로운 `락` 설정은 불가능하다. 이는 `모순성`을 방지하고 직렬화 가능성을 보장하기 위함이다."
    },
    {
      "question": "`병행 제어` 기법 중, `트랜잭션`들이 충돌하지 않을 것이라고 가정하고 일단 실행한 후, 커밋 시점에 충돌 여부를 검증하는 방식은?",
      "options": [
        "`로킹 기법`",
        "`2단계 로킹 규약`",
        "`타임스탬프 기법`",
        "`낙관적 병행 제어`"
      ],
      "answer": "`낙관적 병행 제어`",
      "explanation": "`낙관적 병행 제어`는 `트랜잭션` 간 충돌이 발생할 확률이 낮다고 가정하고, 일단 `트랜잭션`을 실행시킨 후 커밋 시점에서 충돌 여부를 확인하여 처리하는 방식이다. 충돌이 발견되면 `트랜잭션`을 철회하고 재시작할 수 있다. `로킹 기법`과 `타임스탬프 기법`은 충돌을 사전에 방지하는 비관적 방식에 가깝다."
    }
  ],
  "검토가 필요한 문제 목록": [],
  "오타 및 수정사항": []
}