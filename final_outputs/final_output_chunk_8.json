{
  "concepts_and_terms": [
    "데이터베이스 스키마",
    "데이터 독립성",
    "데이터베이스 설계 단계",
    "정규화",
    "ER 다이어그램",
    "인덱스",
    "클러스터링",
    "파티션",
    "DBMS",
    "반정규화"
  ],
  "questions": [
    {
      "question": "다음 중 데이터베이스의 전체적인 논리적 구조를 모든 사용자 관점에서 통합하여 기술하며, 조직 전체의 데이터 관점에서 데이터베이스를 정의하는 스키마는 무엇인가?",
      "options": [
        "외부 스키마",
        "개념 스키마",
        "내부 스키마",
        "물리 스키마"
      ],
      "answer": "개념 스키마",
      "explanation": "`개념 스키마`는 데이터베이스 전체의 논리적 구조를 표현하며, 모든 사용자들의 관점을 통합한 것이다. 이는 조직 전체의 데이터 요구사항을 반영한다. `외부 스키마`는 개별 사용자 또는 응용 프로그램 관점에서 데이터베이스의 논리적 구조를 정의하며, `내부 스키마`는 데이터베이스의 물리적 저장 구조를 기술한다."
    },
    {
      "question": "데이터베이스 설계 단계 중 `ER 다이어그램`을 바탕으로 `정규화`를 수행하여 `목표 DBMS`에 맞는 논리적 데이터 모델로 변환하는 작업이 주로 이루어지는 단계는?",
      "options": [
        "개념 설계",
        "논리 설계",
        "물리 설계",
        "요구사항 분석"
      ],
      "answer": "논리 설계",
      "explanation": "`논리 설계` 단계에서는 `개념 설계`에서 생성된 `ER 다이어그램`을 `목표 DBMS`에 맞는 논리적 데이터 모델(예: 관계 모델)로 매핑하고 `정규화`를 통해 데이터 중복을 최소화하고 데이터 일관성을 확보한다. 이 과정에서 `반정규화`가 고려될 수도 있다."
    },
    {
      "question": "`내부 스키마`가 변경되어도 `개념 스키마`에 영향을 주지 않아, 응용 프로그램에 대한 수정 없이 데이터의 물리적 저장 방법(예: 파일 구조, 저장 장치)을 변경할 수 있도록 하는 데이터 독립성을 무엇이라고 하는가?",
      "options": [
        "논리적 독립성",
        "물리적 독립성",
        "데이터 독립성",
        "개념적 독립성"
      ],
      "answer": "물리적 독립성",
      "explanation": "`물리적 독립성`은 `내부 스키마`의 변경(저장 장치 변경, 파일 구조 변경 등)이 `개념 스키마`에 영향을 주지 않음을 의미한다. 이는 데이터베이스 관리 시스템(DBMS)이 스키마 간의 매핑을 통해 보장하며, 응용 프로그램이 물리적 저장 구조의 변경으로부터 보호받게 한다. 반면 `논리적 독립성`은 `개념 스키마`의 변경이 `외부 스키마`나 응용 프로그램에 영향을 주지 않음을 의미한다."
    },
    {
      "question": "다음 중 `물리 설계` 단계에서 데이터베이스의 성능 최적화를 위해 사용될 수 있는 주요 기법이 아닌 것은?",
      "options": [
        "인덱스",
        "클러스터링",
        "파티션",
        "정규화"
      ],
      "answer": "정규화",
      "explanation": "`인덱스`, `클러스터링`, `파티션`은 모두 `물리 설계` 단계에서 데이터 접근 속도를 향상시키고 관리 효율성을 높이기 위한 성능 최적화 기법들이다. `반정규화` 또한 성능 향상을 위해 `물리 설계` 단계에서 고려될 수 있다. 반면 `정규화`는 주로 `논리 설계` 단계에서 데이터의 중복을 제거하고 일관성을 유지하기 위해 수행되는 작업이다."
    }
  ],
  "검토가 필요한 문제 목록": [],
  "오타 및 수정사항": []
}